suite: test application ingressroute
templates:
  - templates/traefik/ingress-route.yaml
tests:
  - it: should render nothing if appIngress empty
    asserts:
      - hasDocuments:
          count: 0

  - it: should render match rule right
    values:
      - ./values/test.yaml
    asserts:
      - equal:
          path: spec.routes[0].match
          value: (Host(`192.168.0.1`) || Host(`172.16.0.1`)) && PathPrefix(`/app`)
        documentIndex: 1
      - equal:
          path: spec.routes[0].match
          value: (Host(`192.168.0.1`) || Host(`172.16.0.1`)) && PathPrefix(`/imag`)
        documentIndex: 2

  - it: should render multiple services port
    set:
      appIngressroutes:
        - name: app
          path: /app
          servicePortName: product
        - name: api
          path: /api
          servicePortName: product
        - name: example
          path: /example
          servicePortName: example
      service:
        ports:
          - port: 80
            name: product
          - port: 8080
            name: example
    asserts:
      - hasDocuments:
          count: 3
      - isSubset:
          path: spec.routes[0]
          content:
            services:
              - name: RELEASE-NAME-application-chart-template
                port: product
        documentIndex: 0
      - isSubset:
          path: spec.routes[0]
          content:
            services:
              - name: RELEASE-NAME-application-chart-template
                port: product
        documentIndex: 1
      - isSubset:
          path: spec.routes[0]
          content:
            services:
              - name: RELEASE-NAME-application-chart-template
                port: example
        documentIndex: 2

  - it: should render middleware by default
    set:
      appIngressroutes:
        - name: app
          path: /app
          servicePortName: app
      service:
        ports:
          - port: 80
            name: app
    asserts:
      - equal:
          path: spec.routes[0].middlewares[0].name
          value: RELEASE-NAME-application-chart-template-compress
      - equal:
          path: spec.routes[0].middlewares[1].name
          value: RELEASE-NAME-application-chart-template-strip-prefix

  - it: should render middleware append cors
    values:
      - ./values/test.yaml
    asserts:
      - equal:
          path: spec.routes[0].middlewares[0].name
          value: RELEASE-NAME-application-chart-template-compress
      - equal:
          path: spec.routes[0].middlewares[1].name
          value: RELEASE-NAME-application-chart-template-strip-prefix
      - equal:
          path: spec.routes[0].middlewares[2].name
          value: RELEASE-NAME-application-chart-template-cors
        documentIndex: 1
      - equal:
          path: spec.routes[0].middlewares[3].name
          value: RELEASE-NAME-application-chart-template-cors
        documentIndex: 0

  - it: should render middleware if set applicationTLS
    values:
      - ./values/test.yaml
    asserts:
      - equal:
          path: spec.routes[0].middlewares[2].name
          value: RELEASE-NAME-application-chart-template-redirect-to-https
        documentIndex: 0

  - it:  should render tls secretName if set applicationTLS
    values:
      - ./values/test.yaml
    asserts:
      - isSubset:
          path: spec.tls
          content:
            secretName: RELEASE-NAME-application-chart-template-tls-secret
        documentIndex: 1
      - isSubset:
          path: spec.tls
          content:
            secretName: RELEASE-NAME-application-chart-template-tls-secret
        documentIndex: 3

  - it:  should render tls certResolver if set applicationTLS
    set:
      applicationTLS:
        certResolver: byzanteam
    values:
      - ./values/test.yaml
    asserts:
      - isSubset:
          path: spec.tls
          content:
            certResolver: byzanteam
        documentIndex: 1
      - isSubset:
          path: spec.tls
          content:
            certResolver: byzanteam
        documentIndex: 3
